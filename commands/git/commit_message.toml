description = "Generate a commit message"

prompt = """
ステージングされた変更（git diff --staged）から適切なコミットメッセージを生成してください。ファイルに対する一切の編集行為は行ってはなりません。gitコマンドの実行は行わず、メッセージの生成のみを行ってください。その際に、以下のルールに従ってください。

# 前提条件

**重要**: このコマンドはステージングされた変更のみを分析します。事前に `git add` で変更をステージングしておく必要があります。一つもファイルがステージングされていない場合は、警告（ステージングされた変更がありません。先に git add を実行してください）を表示します。

# 既存コミット履歴の分析

最近のコミットから、使用パターンを学習してください。その際に、 `git log --oneline -50 --pretty=format:"%s"` コマンドを使用してください。

使用タイプの統計は、以下のコマンドを実行してください。 `git log --oneline -100 --pretty=format:"%s" | grep -oE '^[a-z]+(\\([^)]+\\))?' | sort | uniq -c | sort -nr`

# 言語の自動判定

以下の条件で自動的に日本語と英語を切り替えてください。

1. **git log 分析** による自動判定
2. **プロジェクトファイル** の言語設定
3. **変更ファイル内** のコメントや文字列分析

デフォルトは英語です。

# メッセージ形式

## conventional Commits (Default)

`<type>: <description>`

**重要**: 必ず1行のコミットメッセージを生成します。複数行のメッセージは生成しません。
**注意**: プロジェクト独自の規約がある場合は、それを優先します。

# 標準タイプ

## 必須タイプ

- `feat`: 新機能（ユーザーに見える機能追加）
- `fix`: バグ修正

## 任意タイプ

- `build`: ビルドシステムや外部依存関係の変更
- `chore`: その他の変更（リリースに影響しない）
- `ci`: CI設定ファイルやスクリプトの変更
- `docs`: ドキュメントのみの変更
- `style`: コードの意味に影響しない変更（空白、フォーマット、セミコロンなど）
- `refactor`: バグ修正や機能追加を伴わないコード変更
- `perf': パフォーマンス改善
- `test`: テストの追加や修正

# 動作概要

1. **分析**: `git diff --staged` の内容を分析
2. **生成**: 適切なコミットメッセージを生成

**注意**: このコマンドは git add や git commit を実行しません。コミットメッセージの生成のみを行います。

# スマート機能

## 変更内容の自動分類（ステージングされたファイルのみ）

- 新ファイル追加 → `feat`
- エラー修正パターン → `fix`
- テストファイルのみ → `test`
- 設定ファイル変更 → `chore`
- README/docs更新 → `docs`

## プロジェクト規約の自動検出

- `.gitmessage` ファイル
- `CONTRIBUTING.md` ファイル
- 過去のコミット履歴パターン

## ステージング分析の詳細

分析に使用する情報（読み取りのみ）:

- `git diff --staged --name-only` - 変更ファイル一覧
- `git diff --staged` - 実際の変更内容
- `git status --porcelain` - ファイル状態

# ベストプラクティス

1. **プロジェクトに合わせる**: 既存のコミット言語に従う
2. **簡潔性**: 50文字以内で明確に
3. **一貫性**: 混在させない（英語なら英語で統一）
4. **OSS**: オープンソースなら英語推奨
5. **1行厳守**: 必ず1行のコミットメッセージにする（詳細な説明が必要な場合はPull Requestで補足）

# 注意事項

- **前提条件**: 変更は事前に `git add` でステージングされている必要があります
- **制限事項**: ステージングされていない変更は分析対象外です
- **推奨事項**: プロジェクトの既存コミット規約を事前に確認してください
"""

